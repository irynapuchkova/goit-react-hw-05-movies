{"version":3,"file":"static/js/cast-view.d969df7c.chunk.js","mappings":"2TAEAA,IAAAA,SAAAA,QAAyB,+BACzBA,IAAAA,SAAAA,OAAwB,CACtBC,QAAS,oCAGJ,IAAMC,EAAqB,mCAAG,WAAMC,GAAN,yFACZH,IAAAA,IAAU,sBAAuB,CACtDI,OAAQ,CAAED,KAAAA,KAFuB,uBAC3BE,EAD2B,EAC3BA,KAD2B,kBAK5BA,GAL4B,2CAAH,sDAQrBC,EAAiB,mCAAG,WAAOH,EAAMI,GAAb,yFACRP,IAAAA,IAAU,gBAAiB,CAChDI,OAAQ,CAAED,KAAAA,EAAMI,MAAAA,KAFa,uBACvBF,EADuB,EACvBA,KADuB,kBAKxBA,GALwB,2CAAH,wDAQjBG,EAAiB,mCAAG,WAAMC,GAAN,uFACRT,IAAAA,IAAA,iBAAoBS,IADZ,cACzBC,EADyB,yBAGxBA,GAHwB,2CAAH,sDAMjBC,EAAc,mCAAG,WAAMF,GAAN,yFACLT,IAAAA,IAAA,iBAAoBS,EAApB,aADK,uBACpBJ,EADoB,EACpBA,KADoB,kBAGrBA,GAHqB,2CAAH,sDAMdO,EAAgB,mCAAG,WAAOH,EAAUN,GAAjB,yFACPH,IAAAA,IAAA,iBAAoBS,EAApB,YAAwC,CAC7DL,OAAQ,CAAED,KAAAA,KAFkB,uBACtBE,EADsB,EACtBA,KADsB,kBAKvBA,GALuB,2CAAH,yD,6JC7Bd,SAASQ,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WACHL,IAIL,iBAAC,gHAE0BH,EAAAA,EAAAA,IAAeG,GAFzC,iBAEWG,EAFX,EAEWA,OAENC,EAAQD,GAJb,gDAOGG,QAAQC,MAAM,KAAMC,SAPvB,wDAAD,KAUC,CAACR,KAGF,8BACGG,IACC,wBACGA,EAAKM,KAAI,SAAAC,GAAK,OACb,2BACE,gBACEC,IAAG,wCAAmCD,EAAME,cAC5CC,QAAS,SAAAC,GACPA,EAAEC,OAAOC,QAAU,KACnBF,EAAEC,OAAOJ,IAAMM,GAEjBC,IAAKR,EAAMS,KACXC,OAAQ,IACRC,QAAQ,SAETX,EAAMS,OAXAT,EAAMY,a","sources":["API/fetchMovieInformation.js","views/CastView/CastView.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: '9cd9c5b7e8e826e5ef2c1aca08004ce5',\n};\n\nexport const fetchTrendingMovieDay = async page => {\n  const { data } = await axios.get('/trending/movie/day', {\n    params: { page },\n  });\n\n  return data;\n};\n\nexport const fetchMovieByTitle = async (page, query) => {\n  const { data } = await axios.get('/search/movie', {\n    params: { page, query },\n  });\n\n  return data;\n};\n\nexport const fetchMovieDetails = async movie_id => {\n  const response = await axios.get(`/movie/${movie_id}`);\n\n  return response;\n};\n\nexport const fetchMovieCast = async movie_id => {\n  const { data } = await axios.get(`/movie/${movie_id}/credits`);\n\n  return data;\n};\n\nexport const fetchMovieReview = async (movie_id, page) => {\n  const { data } = await axios.get(`/movie/${movie_id}/reviews`, {\n    params: { page },\n  });\n\n  return data;\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { fetchMovieCast } from '../../API/fetchMovieInformation';\nimport noImage from '../../../src/default_profImg_2.png';\n\nexport default function CastView() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n\n    (async function () {\n      try {\n        const { cast } = await fetchMovieCast(movieId);\n        if (cast) {\n          setCast(cast);\n        }\n      } catch (error) {\n        console.error(error.message);\n      }\n    })();\n  }, [movieId]);\n\n  return (\n    <>\n      {cast && (\n        <ul>\n          {cast.map(actor => (\n            <li key={actor.id}>\n              <img\n                src={`http://image.tmdb.org/t/p/w500${actor.profile_path}`}\n                onError={e => {\n                  e.target.onerror = null;\n                  e.target.src = noImage;\n                }}\n                alt={actor.name}\n                height={213}\n                loading=\"lazy\"\n              ></img>\n              {actor.name}\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n}\n"],"names":["axios","api_key","fetchTrendingMovieDay","page","params","data","fetchMovieByTitle","query","fetchMovieDetails","movie_id","response","fetchMovieCast","fetchMovieReview","CastView","movieId","useParams","useState","cast","setCast","useEffect","console","error","message","map","actor","src","profile_path","onError","e","target","onerror","noImage","alt","name","height","loading","id"],"sourceRoot":""}